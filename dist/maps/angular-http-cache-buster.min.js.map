{"version":3,"sources":["module.js","config.js","HttpCacheBusterInterceptor.js"],"names":[],"mappings":"AAAA,QAAQ,OAAO,+BAA+B;AAC9C;ACDA,QAAQ,OAAO,+BAA+B,yBAAO,UAAU,eAAe;IAC1E,OAAO,cAAc,aAAa,KAAK;;AAE3C;ACHA,QAAQ,OAAO,+BAA+B,SAAS,8BAA8B,YAAY;;IAE7F,IAAI;IACJ,IAAI,iBAAiB;IACrB,IAAI,iBAAiB;IACrB,IAAI;;IAEJ,SAAS,mBAAmB;QACxB,IAAI,wBAAwB;YACxB,OAAO;;;QAGX,OAAO,IAAI,OAAO;;;IAGtB,SAAS,SAAS,MAAM,KAAK;QACzB,IAAI,IAAI;;QAER,OAAO,IAAI,KAAK,QAAQ;YACpB,IAAI,IAAI,MAAM,KAAK,QAAQ,MAAM;gBAC7B,OAAO;;YAEX;;;QAGJ,OAAO;;;IAGX,SAAS,oBAAoB,KAAK;QAC9B,OAAO;aACF,IAAI,QAAQ,SAAS,CAAC,IAAI,MAAM;YACjC,SAAS,kBAAkB,MAAM;;;IAGzC,WAAW;QACP,gBAAgB;QAChB,iBAAiB;QACjB,iBAAiB,UAAU,YAAY;YACnC,IAAI,WAAW,gBAAgB,QAAQ;gBACnC,MAAM,IAAI,MAAM;;;YAGpB,eAAe,KAAK;;QAExB,iBAAiB,UAAU,YAAY;YACnC,IAAI,WAAW,gBAAgB,QAAQ;gBACnC,MAAM,IAAI,MAAM;;;YAGpB,eAAe,KAAK;;QAExB,qBAAqB,UAAU,cAAc;;;YAGzC,IAAI,QAAQ,WAAW,eAAe;gBAClC,yBAAyB;mBACtB;gBACH,yBAAyB,YAAY;oBACjC,OAAO;;;;QAInB,iCAAM,UAAU,gBAAgB,MAAM;;YAElC,IAAI;;YAEJ,SAAS,gBAAgB,KAAK;gBAC1B,IAAI,gBAAgB,CAAC,eAAe,UAAU,SAAS,gBAAgB;gBACvE,IAAI,gBAAgB,CAAC,CAAC,eAAe,UAAU,SAAS,gBAAgB;;gBAExE,IAAI,iBAAiB,eAAe;oBAChC,KAAK,KAAK,KAAK;oBACf,OAAO;;;gBAGX,OAAO,iBAAiB,CAAC;;;YAG7B,UAAU;gBACN,SAAS,UAAU,QAAQ;oBACvB,IAAI,OAAO,OAAO,kBAAkB,OAAO;wBACvC,IAAI,CAAC,SAAS,kBAAkB,OAAO,UAAU,gBAAgB;4BAC7D,OAAO;;;wBAGX,IAAI,gBAAgB,OAAO,MAAM;4BAC7B,OAAO,MAAM,oBAAoB,OAAO;;;;oBAIhD,OAAO;;gBAEX,oBAAoB,UAAU,MAAM;oBAChC,SAAS,kBAAkB;;gBAE/B,qBAAqB,SAAS;;;YAGlC,OAAO;;;;;IAKf,OAAO;;;AAGX","file":"angular-http-cache-buster.min.js","sourcesContent":["angular.module('paquettea.http-cache-buster', []);\n","angular.module('paquettea.http-cache-buster').config(function ($httpProvider) {\n    return $httpProvider.interceptors.push('HttpCacheBusterInterceptor');\n});\n","angular.module('paquettea.http-cache-buster').provider('HttpCacheBusterInterceptor', function () {\n\n    var provider;\n    var blackListRules = [];\n    var whiteListRules = [];\n    var customQsParameterValue;\n\n    function qsParameterValue() {\n        if (customQsParameterValue) {\n            return customQsParameterValue();\n        }\n\n        return new Date().getTime();\n    }\n\n    function hasMatch(list, url) {\n        var i = 0;\n\n        while (i < list.length) {\n            if (url.match(list[i]) !== null) {\n                return true;\n            }\n            i++;\n        }\n\n        return false;\n    }\n\n    function addCacheBusterToUrl(url) {\n        return url +\n            (url.indexOf('?') === -1 ? '?' : '&') +\n            provider.qsParameterName + '=' + qsParameterValue();\n    }\n\n    provider = {\n        affectTemplate: false,\n        qsParameterName: 'cb',\n        pushToBlackList: function (regexpRule) {\n            if (regexpRule.constructor !== RegExp) {\n                throw new Error('expected a regular expression');\n            }\n\n            blackListRules.push(regexpRule);\n        },\n        pushToWhiteList: function (regexpRule) {\n            if (regexpRule.constructor !== RegExp) {\n                throw new Error('expected a regular expression');\n            }\n\n            whiteListRules.push(regexpRule);\n        },\n        setQsParameterValue: function (valueHandler) {\n\n            //normalize calls by forcing the value to be a function\n            if (angular.isFunction(valueHandler)) {\n                customQsParameterValue = valueHandler;\n            } else {\n                customQsParameterValue = function () {\n                    return valueHandler;\n                };\n            }\n        },\n        $get: function ($templateCache, $log) {\n\n            var service;\n\n            function isCompatibleUrl(url) {\n                var isWhiteListed = !whiteListRules.length || hasMatch(whiteListRules, url);\n                var isBlackListed = !!blackListRules.length && hasMatch(blackListRules, url);\n\n                if (isWhiteListed && isBlackListed) {\n                    $log.warn(url, 'was both blacklisted and whitelisted - no cache buster will be appended.');\n                    return false;\n                }\n\n                return isWhiteListed && !isBlackListed;\n            }\n\n            service = {\n                request: function (config) {\n                    if (config.method.toUpperCase() === 'GET') {\n                        if (!provider.affectTemplate && config.cache === $templateCache) {\n                            return config;\n                        }\n\n                        if (isCompatibleUrl(config.url)) {\n                            config.url = addCacheBusterToUrl(config.url);\n                        }\n                    }\n\n                    return config;\n                },\n                setQsParameterName: function (name) {\n                    provider.qsParameterName = name;\n                },\n                setQsParameterValue: provider.setQsParameterValue\n            };\n\n            return service;\n        }\n\n    };\n\n    return provider;\n\n});\n"],"sourceRoot":"/source/"}