{"version":3,"sources":["module.js","config.js","HttpCacheBusterInterceptor.js"],"names":["angular","module","config","$httpProvider","interceptors","push","provider","qsParameterValue","useCacheBuster","isFunction","customQsParameterValue","Date","getTime","hasMatch","list","url","i","length","match","addCacheBusterToUrl","indexOf","qsParameterName","blackListRules","whiteListRules","affectTemplate","pushToBlackList","regexpRule","constructor","RegExp","Error","pushToWhiteList","setQsParameterValue","valueHandler","$get","$templateCache","$log","isCompatibleUrl","isWhiteListed","isBlackListed","warn","service","request","method","toUpperCase","isDefined","cache","setQsParameterName","name"],"mappings":"AAAAA,QAAQC,OAAO,kCCAfD,QAAQC,OAAO,+BAA+BC,QAAA,gBAAO,SAAUC,GAC3D,MAAOA,GAAcC,aAAaC,KAAK,iCCD3CL,QAAQC,OAAO,+BAA+BK,SAAS,6BAA8B,WAOjF,QAASC,GAAiBL,GACtB,GAAIA,GAAUA,EAAOM,eAAgB,CACjC,GAAIR,QAAQS,WAAWP,EAAOM,gBAC1B,MAAON,GAAOM,gBACX,IAAIN,EAAOM,kBAAmB,EACjC,MAAON,GAAOM,eAItB,MAAIE,GACOA,KAGJ,GAAIC,OAAOC,UAGtB,QAASC,GAASC,EAAMC,GAGpB,IAFA,GAAIC,GAAI,EAEDA,EAAIF,EAAKG,QAAQ,CACpB,GAA2B,OAAvBF,EAAIG,MAAMJ,EAAKE,IACf,OAAO,CAEXA,KAGJ,OAAO,EAGX,QAASG,GAAoBjB,GACzB,MAAOA,GAAOa,KACmB,KAA5Bb,EAAOa,IAAIK,QAAQ,KAAc,IAAM,KACxCd,EAASe,gBAAkB,IAAMd,EAAiBL,GArC1D,GAAII,GAGAI,EAFAY,KACAC,IAoHJ,OA9EAjB,IACIkB,gBAAgB,EAChBH,gBAAiB,KACjBI,gBAAiB,SAAUC,GACvB,GAAIA,EAAWC,cAAgBC,OAC3B,KAAM,IAAIC,OAAM,gCAGpBP,GAAejB,KAAKqB,IAExBI,gBAAiB,SAAUJ,GACvB,GAAIA,EAAWC,cAAgBC,OAC3B,KAAM,IAAIC,OAAM,gCAGpBN,GAAelB,KAAKqB,IAExBK,oBAAqB,SAAUC,GAIvBtB,EADAV,QAAQS,WAAWuB,GACMA,EAEA,WACrB,MAAOA,KAInBC,MAAA,iBAAA,OAAM,SAAUC,EAAgBC,GAI5B,QAASC,GAAgBrB,GACrB,GAAIsB,IAAiBd,EAAeN,QAAUJ,EAASU,EAAgBR,GACnEuB,IAAkBhB,EAAeL,QAAUJ,EAASS,EAAgBP,EAExE,OAAIsB,IAAiBC,GACjBH,EAAKI,KAAKxB,EAAK,6EACR,GAGJsB,IAAkBC,EAX7B,GAAIE,EA2CJ,OA7BAA,IACIC,QAAS,SAAUvC,GACf,GAAoC,QAAhCA,EAAOwC,OAAOC,cAAyB,CACvC,GAAI3C,QAAQ4C,UAAU1C,EAAOM,iBAAmBN,EAAOM,kBAAmB,EAEtE,MADAN,GAAOa,IAAMI,EAAoBjB,GAC1BA,CAGX,IAAIA,EAAOM,kBAAmB,EAC1B,MAAON,EAGX,KAAKI,EAASkB,gBAAkBtB,EAAO2C,QAAUX,EAC7C,MAAOhC,EAGPkC,GAAgBlC,EAAOa,OACvBb,EAAOa,IAAMI,EAAoBjB,IAIzC,MAAOA,IAEX4C,mBAAoB,SAAUC,GAC1BzC,EAASe,gBAAkB0B,GAE/BhB,oBAAqBzB,EAASyB","file":"angular-http-cache-buster.min.js","sourcesContent":["angular.module('paquettea.http-cache-buster', []);\n","angular.module('paquettea.http-cache-buster').config(function ($httpProvider) {\n    return $httpProvider.interceptors.push('HttpCacheBusterInterceptor');\n});\n","angular.module('paquettea.http-cache-buster').provider('HttpCacheBusterInterceptor', function () {\n\n    var provider;\n    var blackListRules = [];\n    var whiteListRules = [];\n    var customQsParameterValue;\n\n    function qsParameterValue(config) {\n        if (config && config.useCacheBuster) {\n            if (angular.isFunction(config.useCacheBuster)) {\n                return config.useCacheBuster();\n            } else if (config.useCacheBuster !== true) {\n                return config.useCacheBuster;\n            }\n        }\n\n        if (customQsParameterValue) {\n            return customQsParameterValue();\n        }\n\n        return new Date().getTime();\n    }\n\n    function hasMatch(list, url) {\n        var i = 0;\n\n        while (i < list.length) {\n            if (url.match(list[i]) !== null) {\n                return true;\n            }\n            i++;\n        }\n\n        return false;\n    }\n\n    function addCacheBusterToUrl(config) {\n        return config.url +\n            (config.url.indexOf('?') === -1 ? '?' : '&') +\n            provider.qsParameterName + '=' + qsParameterValue(config);\n    }\n\n    provider = {\n        affectTemplate: false,\n        qsParameterName: 'cb',\n        pushToBlackList: function (regexpRule) {\n            if (regexpRule.constructor !== RegExp) {\n                throw new Error('expected a regular expression');\n            }\n\n            blackListRules.push(regexpRule);\n        },\n        pushToWhiteList: function (regexpRule) {\n            if (regexpRule.constructor !== RegExp) {\n                throw new Error('expected a regular expression');\n            }\n\n            whiteListRules.push(regexpRule);\n        },\n        setQsParameterValue: function (valueHandler) {\n\n            //normalize calls by forcing the value to be a function\n            if (angular.isFunction(valueHandler)) {\n                customQsParameterValue = valueHandler;\n            } else {\n                customQsParameterValue = function () {\n                    return valueHandler;\n                };\n            }\n        },\n        $get: function ($templateCache, $log) {\n\n            var service;\n\n            function isCompatibleUrl(url) {\n                var isWhiteListed = !whiteListRules.length || hasMatch(whiteListRules, url);\n                var isBlackListed = !!blackListRules.length && hasMatch(blackListRules, url);\n\n                if (isWhiteListed && isBlackListed) {\n                    $log.warn(url, 'was both blacklisted and whitelisted - no cache buster will be appended.');\n                    return false;\n                }\n\n                return isWhiteListed && !isBlackListed;\n            }\n\n            service = {\n                request: function (config) {\n                    if (config.method.toUpperCase() === 'GET') {\n                        if (angular.isDefined(config.useCacheBuster) && config.useCacheBuster !== false) {\n                            config.url = addCacheBusterToUrl(config);\n                            return config;\n                        }\n\n                        if (config.useCacheBuster === false) {\n                            return config;\n                        }\n\n                        if (!provider.affectTemplate && config.cache === $templateCache) {\n                            return config;\n                        }\n\n                        if (isCompatibleUrl(config.url)) {\n                            config.url = addCacheBusterToUrl(config);\n                        }\n                    }\n\n                    return config;\n                },\n                setQsParameterName: function (name) {\n                    provider.qsParameterName = name;\n                },\n                setQsParameterValue: provider.setQsParameterValue\n            };\n\n            return service;\n        }\n\n    };\n\n    return provider;\n\n});\n"],"sourceRoot":"/source/"}