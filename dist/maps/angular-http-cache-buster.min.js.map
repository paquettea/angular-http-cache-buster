{"version":3,"sources":["module.js","config.js","HttpCacheBusterInterceptor.js"],"names":["angular","module","config","$httpProvider","interceptors","push","provider","qsParameterValue","customQsParameterValue","Date","getTime","hasMatch","list","url","i","length","match","addCacheBusterToUrl","indexOf","qsParameterName","blackListRules","whiteListRules","affectTemplate","pushToBlackList","regexpRule","constructor","RegExp","Error","pushToWhiteList","setQsParameterValue","valueHandler","isFunction","$get","$templateCache","$log","isCompatibleUrl","isWhiteListed","isBlackListed","warn","service","request","method","toUpperCase","cache","setQsParameterName","name"],"mappings":"AAAAA,QAAQC,OAAO,kCCAfD,QAAQC,OAAO,+BAA+BC,QAAA,gBAAO,SAAUC,GAC3D,MAAOA,GAAcC,aAAaC,KAAK,iCCD3CL,QAAQC,OAAO,+BAA+BK,SAAS,6BAA8B,WAOjF,QAASC,KACL,MAAIC,GACOA,KAGJ,GAAIC,OAAOC,UAGtB,QAASC,GAASC,EAAMC,GAGpB,IAFA,GAAIC,GAAI,EAEDA,EAAIF,EAAKG,QAAQ,CACpB,GAA2B,OAAvBF,EAAIG,MAAMJ,EAAKE,IACf,OAAO,CAEXA,KAGJ,OAAO,EAGX,QAASG,GAAoBJ,GACzB,MAAOA,IACmB,KAArBA,EAAIK,QAAQ,KAAc,IAAM,KACjCZ,EAASa,gBAAkB,IAAMZ,IA7BzC,GAAID,GAGAE,EAFAY,KACAC,IAmGJ,OArEAf,IACIgB,gBAAgB,EAChBH,gBAAiB,KACjBI,gBAAiB,SAAUC,GACvB,GAAIA,EAAWC,cAAgBC,OAC3B,KAAM,IAAIC,OAAM,gCAGpBP,GAAef,KAAKmB,IAExBI,gBAAiB,SAAUJ,GACvB,GAAIA,EAAWC,cAAgBC,OAC3B,KAAM,IAAIC,OAAM,gCAGpBN,GAAehB,KAAKmB,IAExBK,oBAAqB,SAAUC,GAIvBtB,EADAR,QAAQ+B,WAAWD,GACMA,EAEA,WACrB,MAAOA,KAInBE,MAAA,iBAAA,OAAM,SAAUC,EAAgBC,GAI5B,QAASC,GAAgBtB,GACrB,GAAIuB,IAAiBf,EAAeN,QAAUJ,EAASU,EAAgBR,GACnEwB,IAAkBjB,EAAeL,QAAUJ,EAASS,EAAgBP,EAExE,OAAIuB,IAAiBC,GACjBH,EAAKI,KAAKzB,EAAK,6EACR,GAGJuB,IAAkBC,EAX7B,GAAIE,EAkCJ,OApBAA,IACIC,QAAS,SAAUtC,GACf,GAAoC,QAAhCA,EAAOuC,OAAOC,cAAyB,CACvC,IAAKpC,EAASgB,gBAAkBpB,EAAOyC,QAAUV,EAC7C,MAAO/B,EAGPiC,GAAgBjC,EAAOW,OACvBX,EAAOW,IAAMI,EAAoBf,EAAOW,MAIhD,MAAOX,IAEX0C,mBAAoB,SAAUC,GAC1BvC,EAASa,gBAAkB0B,GAE/BhB,oBAAqBvB,EAASuB","file":"angular-http-cache-buster.min.js","sourcesContent":["angular.module('paquettea.http-cache-buster', []);\n","angular.module('paquettea.http-cache-buster').config(function ($httpProvider) {\n    return $httpProvider.interceptors.push('HttpCacheBusterInterceptor');\n});\n","angular.module('paquettea.http-cache-buster').provider('HttpCacheBusterInterceptor', function () {\n\n    var provider;\n    var blackListRules = [];\n    var whiteListRules = [];\n    var customQsParameterValue;\n\n    function qsParameterValue() {\n        if (customQsParameterValue) {\n            return customQsParameterValue();\n        }\n\n        return new Date().getTime();\n    }\n\n    function hasMatch(list, url) {\n        var i = 0;\n\n        while (i < list.length) {\n            if (url.match(list[i]) !== null) {\n                return true;\n            }\n            i++;\n        }\n\n        return false;\n    }\n\n    function addCacheBusterToUrl(url) {\n        return url +\n            (url.indexOf('?') === -1 ? '?' : '&') +\n            provider.qsParameterName + '=' + qsParameterValue();\n    }\n\n    provider = {\n        affectTemplate: false,\n        qsParameterName: 'cb',\n        pushToBlackList: function (regexpRule) {\n            if (regexpRule.constructor !== RegExp) {\n                throw new Error('expected a regular expression');\n            }\n\n            blackListRules.push(regexpRule);\n        },\n        pushToWhiteList: function (regexpRule) {\n            if (regexpRule.constructor !== RegExp) {\n                throw new Error('expected a regular expression');\n            }\n\n            whiteListRules.push(regexpRule);\n        },\n        setQsParameterValue: function (valueHandler) {\n\n            //normalize calls by forcing the value to be a function\n            if (angular.isFunction(valueHandler)) {\n                customQsParameterValue = valueHandler;\n            } else {\n                customQsParameterValue = function () {\n                    return valueHandler;\n                };\n            }\n        },\n        $get: function ($templateCache, $log) {\n\n            var service;\n\n            function isCompatibleUrl(url) {\n                var isWhiteListed = !whiteListRules.length || hasMatch(whiteListRules, url);\n                var isBlackListed = !!blackListRules.length && hasMatch(blackListRules, url);\n\n                if (isWhiteListed && isBlackListed) {\n                    $log.warn(url, 'was both blacklisted and whitelisted - no cache buster will be appended.');\n                    return false;\n                }\n\n                return isWhiteListed && !isBlackListed;\n            }\n\n            service = {\n                request: function (config) {\n                    if (config.method.toUpperCase() === 'GET') {\n                        if (!provider.affectTemplate && config.cache === $templateCache) {\n                            return config;\n                        }\n\n                        if (isCompatibleUrl(config.url)) {\n                            config.url = addCacheBusterToUrl(config.url);\n                        }\n                    }\n\n                    return config;\n                },\n                setQsParameterName: function (name) {\n                    provider.qsParameterName = name;\n                },\n                setQsParameterValue: provider.setQsParameterValue\n            };\n\n            return service;\n        }\n\n    };\n\n    return provider;\n\n});\n"],"sourceRoot":"/source/"}